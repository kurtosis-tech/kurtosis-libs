syntax = "proto3";
package test_suite_api;
// NOTE: It sucks that we have this Go-specific logic inside this file (which should be language-agnostic). However, the Protobuf team have
// taken a hard stance on this being the way it should be done, so we have to do it this way.
option go_package = "github.com/kurtosis-tech/kurtosis-libs/golang/lib/rpc_api/bindings";

import "google/protobuf/empty.proto";

service TestSuiteService {
  // Endpoint to verify the gRPC server is actually up before making any real calls
  rpc IsAvailable(google.protobuf.Empty) returns (google.protobuf.Empty) {};

  rpc GetTestSuiteMetadata(google.protobuf.Empty) returns (TestSuiteMetadata) {};

  // Will be called by Kurtosis itself, telling the testsuite container to copy static files contained in the testsuite 
  //  to the suite execution volume so the API container can use them when starting new services
  rpc CopyStaticFilesToExecutionVolume(CopyStaticFilesToExecutionVolumeArgs) returns (google.protobuf.Empty) {};

  rpc SetupTest(SetupTestArgs) returns (google.protobuf.Empty) {};

  // We don't need args dictating what test to run because SetupTest already indicates it (and it wouldn't make
  //  sense to setup one test and run another)
  rpc RunTest(google.protobuf.Empty) returns (google.protobuf.Empty) {};
}

// ====================================================================================================
//                                       GetTestSuiteMetadata
// ====================================================================================================
message TestSuiteMetadata {
  // Mapping of testName -> testMetadata
  map<string, TestMetadata> test_metadata = 1;

  uint32 network_width_bits = 2;

  // "Set" of user-defined ID's identifying the static files that the testsuite container has which can be
  //  used when starting services
  map<string, bool> static_files = 3;
}

message TestMetadata {
  bool is_partitioning_enabled = 1;

  // "Set" of artifact URLs used by the test
  map<string, bool> used_artifact_urls = 2;

  uint32 test_setup_timeout_in_seconds = 3;

  uint32 test_run_timeout_in_seconds = 4;
}

// ====================================================================================================
//                               Copy Static Files To Execution Volume
// ====================================================================================================
message CopyStaticFilesToExecutionVolumeArgs {
  // Mapping of user_defined_id -> filepath_relative_to_suite_execution_volume_root where the testsuite container
  //  must copy its files
  // The user_defined_id corresponds to the ID provided in the static_files "set" in the testsuite metadata
  map<string, string> 
}

// ====================================================================================================
//                                              SetupTest
// ====================================================================================================
message SetupTestArgs {
  string test_name = 1;
}
